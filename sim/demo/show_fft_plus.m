% Plot and return the power spectrum of a given grayscale image
% Ed Foley
% December 8, 2014, updated May 20, 2017
% Provided with zero warranty
%
% img_in: the grayscale image that is to be processed
% img_in_scale: what proportion of the original dimensions the input should
%   be resized to. Smaller factors greatly enhance speed and reduce memory
%   usage at the expense of adding resizing artifacts into the FFT.
% fft_scale: the proportion, relative to the size of the reduced image, of
%   the image the FFT will actually act on (padding with zeros as
%   necessary). Larger values are more memory-demanding but yield better
%   transform resolution.
% LD: a matrix whose columns designate a u-position, a v-position, and a
%   relative magnitude of a point of light whose diffraction effects are to
%   be shown.  Add more rows for additional points of light.
% mag_lims: the range of magnitudes that should be covered by the color
%   bar.  Values above -mag_lims(1) will be shown the same color as
%   -mag_lims(1); values below -mag_lims(2) will be shown the same color as
%   -mag_lims(2).  For example, enter [1.0 4.0] to show contrast ratios 
%   between -4.0 and -1.0.
% LD_lim: controls the u- and v-axis boundaries.  The plot will be bounded
%   by [-LD_lim, LD_lim] on both the u- and v-axes.
% nominal_plot_size: the target size of the aperture and PSF plots
% color_map: the color map to use for display. The values 'parula', 'hot'
%   and 'bone' work better than others.
% print_mode: true inverts colors in output images to reduce black ink
%   usage
% figure_num: the starting figure number to use when plotting results.
%   Because up to three plots will be produced, make sure to space
%   the figure_num arguments in successive calls by at least 3.
% mask_name: the name for the input image.  This will be shown in the plot
%   titles.
% filename_string: the string to use in the files generated by this
%   function.  Make sure to leave off extensions and use only valid
%   characters.
function [ xfm ] = show_fft_plus(img_in, img_in_scale, fft_scale, ld, mag_lims, ld_lim, nominal_plot_size, color_map, print_mode, figure_num, mask_name, filename_string)
font_size_const = 14;  % font size to use on plots
show_aperture =  true;  % true to display the aperture image in a plot window and save it in EPS and PNG format
show_simple =    true;  % true display a grayscale power spectrum with no axis labels and save a PNG of it
show_scaled =    true;  % true to display the formatted power spectrum with axis labels and save it in EPS and PNG format
make_spec_file = true;  % true to create a TXT file recording some of the arguments to this function
ld_u_axis_tick_spacing = 2;  % u-axis tick spacing and tick label spacing
ld_v_axis_tick_spacing = 2;  % v-axis tick spacing and tick label spacing
extra_title_margin = 0.5;  % extra vertical margin for plot title

% Calculate size so it is reported in specs later on
orig_size = size(img_in);

if (orig_size(1) ~= orig_size(2))
    warning('The input image to show_fft_plus is not square.  The function will not perform as expected.');
end

% Convert input mask/aperture to single to save memory
img_in = single(img_in);

% Create a figure showing the mask/aperture and save the figure to a file
% if (show_aperture && figure_num ~= 0)
%     plot_aperture(img_in, mask_name, filename_string, figure_num, font_size_const, nominal_plot_size, print_mode);
% end

% Calculate the power spectrum of the image
[xfm, reduced_size, fft_size] = getCleverPowerSpectrum(img_in, img_in_scale, fft_scale, ld);

if (figure_num == 0)
    return;
end

% Take the log to roughly obtain a brightness
log_scaled = log_normalize(xfm);  % entries are nonpositive now 
% ld_bounds = (size(xfm) ./ fft_scale)' * [-0.5 0.5];  % the range of lambda/D shown over whole image
ld_bounds = reduced_size' * [-0.5 0.5];  % the range of lambda/D shown over whole image

% Scale and crop the PSF manually to obtain a result without graph format
cropped = crop_by_ld(log_scaled, ld_lim, fft_scale);
cropped = bound_shades(cropped, mag_lims);

if print_mode
    cropped = imcomplement(cropped);  % this requires extra memory...
end
if (show_simple)
    figure(figure_num);
    imshow(cropped);
    colormap(gray(256));
end

imwrite(cropped, [filename_string ' simple PSF.png']);

% NOTE: THIS MAY BE COPIED INTO A DIFFERENT FILE...
% Use the automatic image scale/plot function so that axes are labeled
if (show_scaled)
    scaled_fig = figure(figure_num + 2);
    set(scaled_fig, 'Position', [0 0 nominal_plot_size]);
    imagesc(ld_bounds(1,:), ld_bounds(2,:), flipud(log_scaled));  % actually plot result; flip makes coords agree with convolution
    colormap(figure_num + 2, color_map);
    caxis([-mag_lims(2), -mag_lims(1)]);  % bound color axis
    h = colorbar;
    % bar.label.String = 'Base ten magnitude relative to max';
    ylabel(h, 'log_1_0 contrast');
    axis on;
    % these seem redundant, but performance consistent only with them all
    axis square;
    axis equal;
    xlim([-ld_lim, ld_lim]);
    ylim([-ld_lim, ld_lim]);
    set(gca, 'XTick', -ld_lim:ld_u_axis_tick_spacing:ld_lim);
    set(gca, 'YTick', -ld_lim:ld_v_axis_tick_spacing:ld_lim);
    set(gca, 'YDir', 'normal');
    set(gca, 'TickDir', 'out');  % draw ticks outside of PSF area
    xlabel('u [\lambda/D]');
    ylabel('v [\lambda/D]');
    my_title = title(['Ideal monochromatic, on-axis PSF of ' mask_name]);
    title_pos = get(my_title, 'Position');
    set(my_title, 'Position', title_pos + [0 extra_title_margin 0]);
    set(gca,'FontSize',font_size_const,'fontWeight','bold');
    set(h, 'FontSize', font_size_const, 'fontWeight', 'bold');  % color bar axis font
    set(findall(gcf,'type','text'),'FontSize',font_size_const,'fontWeight','bold');
    print('-depsc', '-painters', [filename_string ' PSF.eps']);
    print('-dpng', [filename_string ' PSF.png']);
end

if make_spec_file
    fid = fopen([filename_string ' PSF specs.txt'], 'w');
    fprintf(fid, ['original mask size:  ' num2str(orig_size(1)) ' px X ' num2str(orig_size(2)) ' px\r\n']);
    fprintf(fid, ['initial mask scaling:  ' num2str(img_in_scale) '\r\n']);
    fprintf(fid, ['reduced mask size:  ' num2str(reduced_size(1)) ' px X ' num2str(reduced_size(2)) ' px\r\n']);
    fprintf(fid, ['FFT domain scale:  ' num2str(fft_scale) '\r\n']);
    fprintf(fid, ['FFT size:  ' num2str(fft_size(1)) ' px X ' num2str(fft_size(2)) ' px\r\n']);
    fprintf(fid, ['asterism contents (u, v):  ']);
    
    for i=1:size(ld, 1)
        fprintf(fid, [num2str(ld(i, 3)) ' @ (' num2str(ld(i, 1)) ', ' num2str(ld(i, 2)) ') lam/D']);
        if i < size(ld, 1)
            fprintf(fid, '; ');
        end
    end
    fprintf(fid, '\r\n');
    fprintf(fid, ['magnitude limits:  [' num2str(-mag_lims(2)) ', ' num2str(-mag_lims(1)), ']\r\n']);
    fprintf(fid, ['lam/D limits:  [' num2str(-ld_lim) ', ' num2str(ld_lim) ']\r\n']);
    fprintf(fid, ['output PSF size:  ' num2str(size(cropped, 1)) ' px X ' num2str(size(cropped, 2)) ' px\r\n']);
    fprintf(fid, ['nominal plot size:  ' num2str(nominal_plot_size(1)) ' px X ' num2str(nominal_plot_size(2)) ' px\r\n']);
    fprintf(fid, ['timestamp:  ' datestr(now)]);
    fclose(fid);
end

end